# this playbook is just a list of instructions to demo the flow
# and uses of role and playbook itself.
#on my local ubuntu machine, the role nginx is run, with the instructions of installing, shutting down apache, and running nginx.
# then, tasks defined here in the playbook () not in the role), install apache, shut down nginx, and run it.
# there are 2 handlers configured however, since they are run at the end of the playbook,
# the first one for nginx trying to restart nginx, won't work because apache is the one up.
# this, to demonstrate that handlers are executed at the end of the playbook as a last instruction and can conflict with the result of other tasks
---
- hosts: ubuntu-vb-localhost # it applies to all the hosts of the path i provide in the command
  become: yes  # Enable privilege escalation for all tasks by default

  roles:
    - apacheservers
    #- nginx

  # the following is the instructions if there wasn't a project structure folder tree

    # shutdown the nginx so that apache can use the 80 port
  tasks:
    - name: Shut down nginx service
      service:
        name: nginx
        state: stopped
        enabled: no
      become: yes  # this enables privileges
      
    - name: Ensure Apache is running
      service:
        name: apache2
        state: started
        enabled: yes
      notify:  # I define here the handler
        - Restart apache2
      become: yes  # this enables privileges   

  handlers:
    - name: Restart apache2
      service:
        name: apache2
        state: restarted
  