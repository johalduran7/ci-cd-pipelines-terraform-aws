---
- hosts: all # it applies to all the hosts of the path i provide in the command

  # defining variables
  vars:
    # string variable
    playbook_variable: "Hello, from apacheservers"
    # boolean
    is_enabled: true
    # list
    fruits:
      - apple
      - banana
      - orange
    # dictionary variable
    fruits_prices:
      - apple: 0.5
        redapple: 
          - smallredapple: 0.6
          - bigredapple: 0.9
      - pineapple: 0.6
      - coconut: 0.79
      - lemon:
        value: 0.8

    fruit_basket:
        - name: John
          fruits:
          - apple
          - orange
        - name: Jane
          fruits:
          - banana
          - apple
  vars_files:
    #- ../inventories/production/group_vars/all.yml  # this file is not necesary because I already linked the folder by specifying the inventories directory, so ansible will find the variable anyways
    #- ../inventories/staging/group_vars/all.yml # this file cannot be used because it would override other variables such as the hosts in the inventory of staging.
    - ../group_vars/all.yml # this folder can be perfectly used since it's not affecting the project with another inventory
    - ../inventories/production/group_vars/pass-ansible-vault-base64-encrypted.yml # this folder can be perfectly used since it's not affecting the project with another inventory

  tasks: 

    - name: print variable if boolean is true.
      debug:
        var: playbook_variable # shows all the list
        var: fruits_prices[2]  # shows only the third one as "coconut: 0.79"
        var: fruits_prices[2].coconut  # shows only the value of coconut
      when: is_enabled
    
    # Referencing a nested variable
    - name: assign variable to another one.
      command: echo "{{ fruits_prices[0].apple }} "
      register: apple_price_as_registered_var

    - name: print fruits
      debug:
        msg:  
          - "list of fruits {{ fruits }}" 
          - "third one: {{ fruits[0] }}"
          - "Dictionary: {{ fruits_prices }}"
          - "value of limon {{ fruits_prices[3].value }}" 
          - "value of coconut is: {{ fruits_prices[2].coconut }}"
          - "reg var: {{ apple_price_as_registered_var['stdout'] }}"
          - " printing a field from vars: {{ vars.ansible_user }}"
          - " fruit_basket: {{ fruit_basket }}"
          - " print redbigapple from fruits_prices: {{ fruits_prices[0].redapple[1] }} "
          - " print value of key redbigapple from fruits_prices: {{ fruits_prices[0].redapple[1].bigredapple }} "
          - " variable from the file all.yml: {{ ansible_user }} -- {{ test_variable }}"

        # output:        
        # "msg": [
        # "list of fruits ['apple', 'banana', 'orange']",
        # "third one: apple",
        # "Dictionary: [{'apple': 0.5, 'redapple': [{'smallredapple': 0.6}, {'bigredapple': 0.9}]}, {'pineapple': 0.6}, {'coconut': 0.79}, {'lemon': None, 'value': 0.8}]",
        # "value of limon 0.8",
        # "value of coconut is: 0.79",
        # "reg var: 0.5 ",
        # " printing a field from vars: john",
        #  fruit_basket: [{'name': 'John', 'fruits': ['apple', 'orange']}, {'name': 'Jane', 'fruits': ['banana', 'apple']}]",
        # " print redbigapple from fruits_prices: {'bigredapple': 0.9} ",
        # " print redbigapple from fruits_prices: 0.9 "
        #   ]
    - name: Using Jinja 2 filters on variables
      debug:
        msg: |
          {% for item in fruits_prices %}
          Item: {{ item }} 
          {% endfor %}

    - name: print a variable entered in the command # $ ansible-playbook -i inventories/production/hosts playbooks/variables_examples.yml --extra-vars '{"version":"1.0"}'
      debug:
        var: version
    - name: print a variable from a vars file passed on the command. # $ ansible-playbook -i inventories/production/hosts playbooks/variables_examples.yml --extra-vars "@group_vars/all.yml"
      debug:
        var: test_variable  #if the file is already defined in vars_files, file gets overriden, that's it

    - name: register several variables
      set_fact:
        variable1: "Content variable 1"
        variable2: "Content variable 2"
    - name: print variable1 and 2
      debug:
        msg:
          - "Variable1: {{ variable1 }}" 
          - "Variable2: {{ variable2 }}"    

    - name: Decrypting my vault-pass
      debug:
        msg:
          - "Content of pass-ansible-vault-base64-encrypted.yml: {{ variable_vault }}" 




