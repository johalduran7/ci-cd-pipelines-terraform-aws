name: Deployer Pipeline

on:
  push:
    branches:
      - master
    paths:
    - 'app/src/**'  
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: AWS
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1" # Change to your AWS region 

      - name: Get ECR Repository URL from SSM
        run: |
          ECR_REPO_NAME=$(aws ssm get-parameter --name "/app/dev/ecr_repository_name" --query "Parameter.Value" --output text)
          echo "ECR_REPO_NAME=$ECR_REPO_NAME" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Read Current Version
      #   id: version
      #   run: |
      #     CURRENT_VERSION=$(cat version.txt)
      #     echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      # - name: Determine Version Bump Type
      #   id: bump-version
      #   run: |
      #     # Determine the type of version bump (major, minor, patch) based on commit messages
      #     if git log -1 --pretty=%B | grep -q 'BREAKING CHANGE'; then
      #       BUMP_TYPE="major"
      #     elif git log -1 --pretty=%B | grep -q 'feat:'; then
      #       BUMP_TYPE="minor"
      #     else
      #       BUMP_TYPE="patch"
      #     fi
      #     echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_ENV

      # - name: Increment Version
      #   id: increment-version
      #   run: |
      #     IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
      #     if [ "$BUMP_TYPE" == "major" ]; then
      #       MAJOR=$((MAJOR + 1))
      #       MINOR=0
      #       PATCH=0
      #     elif [ "$BUMP_TYPE" == "minor" ]; then
      #       MINOR=$((MINOR + 1))
      #       PATCH=0
      #     else
      #       PATCH=$((PATCH + 1))
      #     fi
      #     NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
      #     echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      #     echo $NEW_VERSION | sed 's/v//' > version.txt # Update version.txt


      - name: Build Docker image
        run: |
          cd ${{ github.workspace }}/app/src/
          docker build -t $ECR_REPO_NAME .

      - name: Tag Docker image
        run: |
          docker tag $ECR_REPO_NAME:latest ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO_NAME:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO_NAME:latest