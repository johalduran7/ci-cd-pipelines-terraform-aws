name: Deployer Pipeline

on:
  push:
    branches:
      - dev
      - stg
      - prod
    paths:
    - 'app/src/version.txt'  # app/src/** for any file and subdirectory
  workflow_dispatch: # Allows manual triggering

jobs:
  validate_version:
    name: Validate Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched
          fetch-tags: true  # Ensure we fetch all tags
      - name: Debug Git Info
        run: |
          echo "Current branch:"
          git branch --show-current
          echo "Available tags:"
          git tag
      - name: Read Version from version.txt
        id: read_version
        run: echo "VERSION=$(cat ${{ github.workspace }}/app/src/version.txt)" >> $GITHUB_ENV
      - name: Check if Tag Exists
        run: |
          TAG="${{ github.ref_name }}-app-v${VERSION}"
          git tag
          if ! git fetch --tags || ! git tag | grep -q "^${TAG}$"; then
            echo "Error: No matching tag '${TAG}' found."
            exit 1
          else
            echo "Tag '${TAG}' exists!"
          fi
  validate_existing_ecr_tags:
    name: Validate tag on ECR
    runs-on: ubuntu-latest
    needs: validate_version
    environment: AWS
    outputs:
      tag_exists: ${{ steps.check_tag.outputs.tag_exists }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched
          fetch-tags: true  # Ensure we fetch all tags
      - name: Read Version from version.txt
        id: read_version
        run: echo "VERSION=$(cat ${{ github.workspace }}/app/src/version.txt)" >> $GITHUB_ENV

      - name: Load .env Variables into GITHUB_ENV
        run: |
          sed -i 's/\r$//' ${{ github.workspace }}/app/.env  # Fix Windows line endings if present
          set -o allexport  # Enable automatic exporting of variables
          source ${{ github.workspace }}/app/.env  # Load variables
          set +o allexport  # Disable automatic exporting
          cat ${{ github.workspace }}/app/.env >> $GITHUB_ENV  # Append variables to GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.aws_region }} 

      - name: Get ECR Repository URL from SSM
        run: |
          ECR_REPO_NAME=$(aws ssm get-parameter --name "/app/${{ github.ref_name }}/ecr_repository_name" --query "Parameter.Value" --output text)
          echo "ECR_REPO_NAME=$ECR_REPO_NAME" >> $GITHUB_ENV  

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true  # Ensure the Docker password is masked

      - name: Check if version exists on ECR
        id: check_tag
        run: |
          tags=$(aws ecr list-images --repository-name ${ECR_REPO_NAME} --query 'imageIds[].imageTag' --output json)
          echo "tags: $tags"

          if echo "$tags" | jq -e --arg VERSION "$VERSION" '.[] | select(. == $VERSION)' >/dev/null; then
              echo "Tag ${VERSION} exists on ${ECR_REPO_NAME}"
              tag_exists=true
          else
              echo "Tag ${VERSION} does not exist on ${ECR_REPO_NAME}."
              tag_exists=false
          fi

          echo "tag_exists: ${tag_exists}"

          if [ -n "$GITHUB_ENV" ]; then
              echo "tag_exists=${tag_exists}" >> $GITHUB_ENV
          fi
          if [ -n "$GITHUB_OUTPUT" ]; then
              echo "tag_exists=${tag_exists}" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: validate_existing_ecr_tags
    if: needs.validate_existing_ecr_tags.outputs.tag_exists == 'false'
    environment: AWS
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched
          fetch-tags: true  # Ensure we fetch all tags
      - name: Read Version from version.txt
        id: read_version
        run: echo "VERSION=$(cat ${{ github.workspace }}/app/src/version.txt)" >> $GITHUB_ENV
      - name: Load .env Variables into GITHUB_ENV
        run: |
          sed -i 's/\r$//' ${{ github.workspace }}/app/.env  # Fix Windows line endings if present
          set -o allexport  # Enable automatic exporting of variables
          source ${{ github.workspace }}/app/.env  # Load variables
          set +o allexport  # Disable automatic exporting
          cat ${{ github.workspace }}/app/.env >> $GITHUB_ENV  # Append variables to GITHUB_ENV

      - name: Checkout Matching Tag
        run: |
          TAG="${{ github.ref_name }}-app-v${VERSION}"
          echo "Checking out tag: ${TAG}"
          git checkout "${TAG}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.aws_region }}  

      - name: Get ECR Repository URL from SSM
        run: |
          ECR_REPO_NAME=$(aws ssm get-parameter --name "/app/${{ github.ref_name }}/ecr_repository_name" --query "Parameter.Value" --output text)
          echo "ECR_REPO_NAME=$ECR_REPO_NAME" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true  # Ensure the Docker password is masked

      - name: Build Docker image
        run: |
          cd ${{ github.workspace }}/app/src/
          docker build -t $ECR_REPO_NAME:$VERSION .

      - name: Tag Docker image
        run: |
          docker tag $ECR_REPO_NAME:$VERSION ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO_NAME:$VERSION


      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO_NAME:$VERSION

  app_version_to_parameter_store:
    runs-on: ubuntu-latest
    needs: 
      - validate_existing_ecr_tags
      - build-and-push
    if: always() && (needs.build-and-push.result == 'success' || needs.validate_existing_ecr_tags.outputs.tag_exists == 'true')

    environment: AWS
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched
          fetch-tags: true  # Ensure we fetch all tags
      - name: Read Version from version.txt and Push TAG to GITHUB_ENV
        id: read_version
        run: echo "TAG=${{ github.ref_name }}-app-v$(cat app/src/version.txt)" >> $GITHUB_ENV
      - name: Load .env Variables into GITHUB_ENV #(They can only be used in thee next step). This has to be done before checking out to the tag
        run: |
          sed -i 's/\r$//' ${{ github.workspace }}/app/.env  # Fix Windows line endings if present
          set -o allexport  # Enable automatic exporting of variables
          source ${{ github.workspace }}/app/.env  # Load variables
          set +o allexport  # Disable automatic exporting
          cat ${{ github.workspace }}/app/.env >> $GITHUB_ENV  # Append variables to GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.aws_region }} 
      - name: update app_version SSM
        run: |
          aws ssm put-parameter \
              --name "/app/${{ github.ref_name }}/app_version" \
              --value "${TAG}" \
              --type "String" \
              --overwrite

  update_asg:
    runs-on: ubuntu-latest
    needs: 
      - app_version_to_parameter_store
      - build-and-push
    if: always() && (needs.build-and-push.result == 'success' || needs.app_version_to_parameter_store.result == 'success' )
    environment: AWS
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched
          fetch-tags: true  # Ensure we fetch all tags
      - name: Load .env Variables into GITHUB_ENV #(They can only be used in thee next step). This has to be done before checking out to the tag
        run: |
          sed -i 's/\r$//' ${{ github.workspace }}/app/.env  # Fix Windows line endings if present
          set -o allexport  # Enable automatic exporting of variables
          source ${{ github.workspace }}/app/.env  # Load variables
          set +o allexport  # Disable automatic exporting
          cat ${{ github.workspace }}/app/.env >> $GITHUB_ENV  # Append variables to GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.aws_region }} 


      - name: update asg
        run: |
          aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name ${{ github.ref_name }}-app_asg \
          --min-size 0 \
          --max-size 2 \
          --desired-capacity 1