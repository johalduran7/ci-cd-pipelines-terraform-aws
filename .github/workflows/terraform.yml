name: Terraform CI/CD

on:
  push:
    branches:
      - dev
    paths:
      - 'app/terraform/version.txt'  # Trigger only if Terraform files change
  # pull_request:
  #   branches:
  #     - master
  #   paths:
  #     - 'app/terraform/**'
permissions:
  actions: write  # Required to trigger workflows
  contents: read  # Required to checkout the repository

jobs:

  validate_version:
    name: Validate Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched
          fetch-tags: true  # Ensure we fetch all tags
      - name: Debug Git Info
        run: |
          echo "Current branch:"
          git branch --show-current
          echo "Available tags:"
          git tag
      - name: Read Version from version.txt
        id: read_version
        run: echo "VERSION=$(cat ${{ github.workspace }}/app/terraform/version.txt)" >> $GITHUB_ENV

      - name: Check if Tag Exists
        run: |
          TAG="dev-infra-v${VERSION}"
          git tag
          if ! git fetch --tags || ! git tag | grep -q "^${TAG}$"; then
            echo "Error: No matching tag '${TAG}' found."
            exit 1
          else
            echo "Tag '${TAG}' exists!"
          fi


  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    needs: validate_version
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched
          fetch-tags: true  # Fetch all tags so we can check out the correct one

      - name: Read Version from version.txt
        id: read_version
        run: echo "VERSION=$(cat ${{ github.workspace }}/app/terraform/version.txt)" >> $GITHUB_ENV

      - name: Checkout Matching Tag
        run: |
          TAG="dev-infra-v${VERSION}"
          echo "Checking out tag: ${TAG}"
          git checkout "${TAG}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}  # Authenticates with Terraform Cloud
      - name: Terraform Init & Validate
        env:
          TF_VAR_ssh_public_key: ${{ secrets.TF_SSH_PUBLIC_KEY }}
          TF_VAR_env: ${{ github.ref_name }} # pushes the name branch: dev or prod
          TF_VAR_path_user_data: ${{ github.workspace }}/app/terraform/modules/asg/user_data.sh
          TF_VAR_infrastructure_version: "dev-infra-v${{ env.VERSION }}" 
        run: |
          cd app/terraform
          terraform init
          terraform fmt -check
          terraform validate

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    environment: AWS
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched
          fetch-tags: true  # Fetch all tags so we can check out the correct one

      - name: Read Version from version.txt
        id: read_version
        run: echo "VERSION=$(cat ${{ github.workspace }}/app/terraform/version.txt)" >> $GITHUB_ENV

      - name: Checkout Matching Tag
        run: |
          TAG="dev-infra-v${VERSION}"
          echo "Checking out tag: ${TAG}"
          git checkout "${TAG}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}  # Authenticates with Terraform Cloud
      - name: Terraform Init & Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }} # Optionally add this
          TF_VAR_ssh_public_key: ${{ secrets.TF_SSH_PUBLIC_KEY }}
          TF_VAR_env: ${{ github.ref_name }} # pushes the name branch: dev or prod
          TF_VAR_path_user_data: "modules/asg/user_data.sh"
          TF_VAR_infrastructure_version: "dev-infra-v${{ env.VERSION }}" 
        run: |
          cd app/terraform
          terraform init
          terraform plan -out=tfplan          
      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: app/terraform/tfplan

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: plan
    environment: AWS
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched
          fetch-tags: true  # Fetch all tags so we can check out the correct one

      - name: Read Version from version.txt
        id: read_version
        run: echo "VERSION=$(cat ${{ github.workspace }}/app/terraform/version.txt)" >> $GITHUB_ENV

      - name: Checkout Matching Tag
        run: |
          TAG="dev-infra-v${VERSION}"
          echo "Checking out tag: ${TAG}"
          git checkout "${TAG}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}  # Authenticates with Terraform Cloud
      - name: Terraform Init  # ðŸ”¹ Ensure backend and workspace are initialized again
        run: |
          cd app/terraform
          terraform init
      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: app/terraform/
      - name: Terraform Apply
        run: |
          cd app/terraform
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }} # Optionally add this
          TF_VAR_ssh_public_key: ${{ secrets.TF_SSH_PUBLIC_KEY }}
          TF_VAR_env: ${{ github.ref_name }}
          TF_VAR_path_user_data: ${{ github.workspace }}/app/terraform/modules/asg/user_data.sh
          TF_VAR_infrastructure_version: "dev-infra-v${{ env.VERSION }}" 
        if: github.event_name == 'push'

  trigger_deployer:
    name: Trigger Deployer
    runs-on: ubuntu-latest
    needs: apply
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Trigger src.yml Workflow
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deployer.yml',  
              ref: 'dev',  
            });
