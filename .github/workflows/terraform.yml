name: Terraform CI/CD

on:
  push:
    branches:
       - dev
       - stg
       - prod
    paths:
      - 'app/terraform/version.txt'  # Trigger only if Terraform files change
  # pull_request:
  #   branches:
  #     - master
  #   paths:
  #     - 'app/terraform/**'
permissions:
  actions: write  # Required to trigger workflows
  contents: read  # Required to checkout the repository

jobs:

  validate_version:
    name: Validate Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched
          fetch-tags: true  # Ensure we fetch all tags
      - name: Debug Git Info
        run: |
          echo "Current branch:"
          git branch --show-current
          echo "Available tags:"
          git tag
      - name: Load .env Variables into GITHUB_ENV (They can only be used in thee next step)
        run: |
          sed -i 's/\r$//' ${{ github.workspace }}/app/.env  # Fix Windows line endings if present
          set -o allexport  # Enable automatic exporting of variables
          source ${{ github.workspace }}/app/.env  # Load variables
          set +o allexport  # Disable automatic exporting
          cat ${{ github.workspace }}/app/.env >> $GITHUB_ENV  # Append variables to GITHUB_ENV
        
      - name: Read Version from version.txt
        id: read_version
        run: |
          echo "VERSION=$(cat ${{ github.workspace }}/app/terraform/version.txt)" >> $GITHUB_ENV
          echo "aws_region: $aws_region"
      - name: Check if Tag Exists
        run: |
          TAG="${{ github.ref_name }}-infra-v${VERSION}"
          git tag
          if ! git fetch --tags || ! git tag | grep -q "^${TAG}$"; then
            echo "Error: No matching tag '${TAG}' found."
            exit 1
          else
            echo "Tag '${TAG}' exists!"
          fi

  validate_existing_infra_tags:
    name: Validate current infra version
    runs-on: ubuntu-latest
    needs: validate_version
    environment: AWS
    outputs:
      tag_exists: ${{ steps.check_infra_version.outputs.version_exists }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched
          fetch-tags: true  # Ensure we fetch all tags
      - name: Read Version from version.txt
        id: read_version
        run: echo "VERSION=$(cat ${{ github.workspace }}/app/terraform/version.txt)" >> $GITHUB_ENV

      - name: Load .env Variables into GITHUB_ENV #(They can only be used in thee next step). This has to be done before checking out to the tag
        run: |
          sed -i 's/\r$//' ${{ github.workspace }}/app/.env  # Fix Windows line endings if present
          set -o allexport  # Enable automatic exporting of variables
          source ${{ github.workspace }}/app/.env  # Load variables
          set +o allexport  # Disable automatic exporting
          cat ${{ github.workspace }}/app/.env >> $GITHUB_ENV  # Append variables to GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.aws_region }} 

      - name: Get the current infrastructure version
        run: |
          current_infra_version=$(aws ssm get-parameter --name "/app/${{ github.ref_name }}/infrastructure_version" --query "Parameter.Value" --output text)
          echo "current_infra_version=$current_infra_version" >> $GITHUB_ENV  

      - name: Check if version exists on AWS
        id: check_infra_version
        run: |
          if [ "$VERSION" = "$current_infra_version" ]; then
            echo "The version app-infra-${VERSION} is already deployed on AWS"
            version_exists=true
          else
            echo "The version app-infra-${VERSION} will be deployed on AWS"
            version_exists=false
          fi
          echo "version_exists=${version_exists}" >> $GITHUB_OUTPUT

  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    needs: validate_existing_infra_tags
    if: needs.validate_existing_infra_tags.outputs.version_exists == 'false'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched
          fetch-tags: true  # Fetch all tags so we can check out the correct one

      - name: Read Version from version.txt
        id: read_version
        run: echo "VERSION=$(cat ${{ github.workspace }}/app/terraform/version.txt)" >> $GITHUB_ENV

      - name: Checkout Matching Tag
        run: |
          TAG="${{ github.ref_name }}-infra-v${VERSION}"
          echo "Checking out tag: ${TAG}"
          git checkout "${TAG}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}  # Authenticates with Terraform Cloud
      - name: Terraform Init & Validate
        env:
          TF_VAR_ssh_public_key: ${{ secrets.TF_SSH_PUBLIC_KEY }}
          TF_VAR_env: ${{ github.ref_name }} # pushes the name branch: dev or prod
          TF_VAR_path_user_data: ${{ github.workspace }}/app/terraform/modules/asg/user_data.sh
          TF_VAR_infrastructure_version: "${{ github.ref_name }}-infra-v${{ env.VERSION }}"
          TF_WORKSPACE: "${{ github.ref_name }}"
        run: |
          cd app/terraform
          terraform init
          terraform fmt -check
          terraform validate

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    environment: AWS
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched
          fetch-tags: true  # Fetch all tags so we can check out the correct one

      - name: Read Version from version.txt
        id: read_version
        run: echo "VERSION=$(cat ${{ github.workspace }}/app/terraform/version.txt)" >> $GITHUB_ENV

      - name: Load .env Variables into GITHUB_ENV
        run: |
          sed -i 's/\r$//' ${{ github.workspace }}/app/.env  # Fix Windows line endings if present
          set -o allexport  # Enable automatic exporting of variables
          source ${{ github.workspace }}/app/.env  # Load variables
          set +o allexport  # Disable automatic exporting
          cat ${{ github.workspace }}/app/.env >> $GITHUB_ENV  # Append variables to GITHUB_ENV


      - name: Checkout Matching Tag
        run: |
          TAG="${{ github.ref_name }}-infra-v${VERSION}"
          echo "Checking out tag: ${TAG}"
          git checkout "${TAG}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}  # Authenticates with Terraform Cloud
      - name: Terraform Init & Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.aws_region }} 
          TF_VAR_ssh_public_key: ${{ secrets.TF_SSH_PUBLIC_KEY }}
          TF_VAR_env: ${{ github.ref_name }} # pushes the name branch: dev or prod
          TF_VAR_infrastructure_version: "${{ github.ref_name }}-infra-v${{ env.VERSION }}" 
          TF_WORKSPACE: "${{ github.ref_name }}"
          TF_path_user_data: ${{ env.path_user_data }}
          TF_cidr_block: ${{ env.cidr_block }}
          TF_public_subnet_a_cidr: ${{ env.public_subnet_a_cidr }}
          TF_public_subnet_b_cidr: ${{ env.public_subnet_b_cidr }}
          TF_private_subnet_a_cidr: ${{ env.private_subnet_a_cidr }}
          TF_private_subnet_b_cidr: ${{ env.private_subnet_b_cidr }}
        run: |
          cd app/terraform
          terraform init
          terraform plan -out=tfplan          
      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: app/terraform/tfplan

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: plan
    environment: AWS
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched
          fetch-tags: true  # Fetch all tags so we can check out the correct one

      - name: Read Version from version.txt
        id: read_version
        run: echo "VERSION=$(cat ${{ github.workspace }}/app/terraform/version.txt)" >> $GITHUB_ENV
      - name: Load .env Variables into GITHUB_ENV #(They can only be used in thee next step). This has to be done before checking out to the tag
        run: |
          sed -i 's/\r$//' ${{ github.workspace }}/app/.env  # Fix Windows line endings if present
          set -o allexport  # Enable automatic exporting of variables
          source ${{ github.workspace }}/app/.env  # Load variables
          set +o allexport  # Disable automatic exporting
          cat ${{ github.workspace }}/app/.env >> $GITHUB_ENV  # Append variables to GITHUB_ENV
      - name: Checkout Matching Tag
        run: |
          TAG="${{ github.ref_name }}-infra-v${VERSION}"
          echo "Checking out tag: ${TAG}"
          git checkout "${TAG}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}  # Authenticates with Terraform Cloud
      - name: Terraform Init  # ðŸ”¹ Ensure backend and workspace are initialized again
        run: |
          cd app/terraform
          terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.aws_region }} 
          TF_VAR_ssh_public_key: ${{ secrets.TF_SSH_PUBLIC_KEY }}
          TF_VAR_env: ${{ github.ref_name }}
          TF_VAR_infrastructure_version: "dev-infra-v${{ env.VERSION }}" 
          TF_WORKSPACE: "${{ github.ref_name }}"
          TF_path_user_data: ${{ env.path_user_data }}
          TF_cidr_block: ${{ env.cidr_block }}
          TF_public_subnet_a_cidr: ${{ env.public_subnet_a_cidr }}
          TF_public_subnet_b_cidr: ${{ env.public_subnet_b_cidr }}
          TF_private_subnet_a_cidr: ${{ env.private_subnet_a_cidr }}
          TF_private_subnet_b_cidr: ${{ env.private_subnet_b_cidr }}
      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: app/terraform/
      - name: Terraform Apply
        run: |
          cd app/terraform
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.aws_region }} 
          TF_VAR_ssh_public_key: ${{ secrets.TF_SSH_PUBLIC_KEY }}
          TF_VAR_env: ${{ github.ref_name }}
          TF_VAR_infrastructure_version: "dev-infra-v${{ env.VERSION }}" 
          TF_WORKSPACE: "${{ github.ref_name }}"
          TF_path_user_data: ${{ env.path_user_data }}
          TF_cidr_block: ${{ env.cidr_block }}
          TF_public_subnet_a_cidr: ${{ env.public_subnet_a_cidr }}
          TF_public_subnet_b_cidr: ${{ env.public_subnet_b_cidr }}
          TF_private_subnet_a_cidr: ${{ env.private_subnet_a_cidr }}
          TF_private_subnet_b_cidr: ${{ env.private_subnet_b_cidr }}
        if: github.event_name == 'push'

  trigger_deployer:
    name: Trigger Deployer
    runs-on: ubuntu-latest
    needs: apply
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Trigger src.yml Workflow
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deployer.yml',  
              ref: '${{ github.ref_name }}',  
            });
