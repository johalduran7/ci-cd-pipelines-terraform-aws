workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH != "master"'  # Exclude master branch
      # changes:
      #   - app/app_version.txt  # Trigger only if this file changes
      when: always
    - when: never  # Prevents the pipeline from running otherwise

stages:
  - setup
  # - validate_version
  # - load_env_variables
  # - validate_existing_ECR_tags
  - build_and_push
  # - app_version_to_parameter_store
  # - update_asg


variables:
  BIN_DIR: "${CI_PROJECT_DIR}/bin"  # Store binaries in project directory
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

services:
  - docker:dind 


cache:
  key: "docker-aws-cli-cache"
  paths:
    - ${BIN_DIR}/  
  policy: pull-push


setup:
  #image: docker:latest
  stage: setup
  before_script:
    - apt-get update && apt-get install -y unzip curl jq 
    - mkdir -p ${BIN_DIR} && export PATH="${BIN_DIR}:$PATH"
    - if [ ! -f "${BIN_DIR}/aws" ]; then curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip awscliv2.zip && ./aws/install --bin-dir ${BIN_DIR} --install-dir ${BIN_DIR}; fi

  script:
    - ls /usr/local/bin/
    - which jq
  cache:
    key: "docker-aws-cli-cache"
    paths:
      - ${BIN_DIR}/  
    policy: pull-push  # Save & restore cache across jobs
  

build_and_push:
  image: docker:latest
  services:
    - docker:19-dind
  stage: build_and_push
  # needs: 
  #   - job: validate_existing_ECR_tags
  #     artifacts: true
  # rules:
  #   - exists:
  #       - variables.env
  #   - if: '$tag_exists == "false"'
  before_script:
  - export PATH="${BIN_DIR}:$PATH"
  # - source variables.env
  script:
    - 'export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"'
    - 'export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"'
    - aws --version
    #- aws s3api list-buckets --region us-east-1 --query "Buckets[].Name"
    # - 'echo "aws_region: ${aws_region}"'
    # - 'echo "aws_region: ${aws_region}"'
    # - 'aws ecr get-login-password --region ${aws_region} | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.${aws_region}.amazonaws.com'
    # - 'ECR_REGISTRY="$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${aws_region}.amazonaws.com"'
    # - 'echo "ECR_REGISTRY: ${ECR_REGISTRY}"'
    # - 'git fetch --tags'
    # - 'git checkout ${TAG}'
    # - cd app/src/
    # - 'docker build -t ${ECR_REPO_NAME}:${VERSION} .'
    # - 'docker tag ${ECR_REPO_NAME}:${VERSION} ${ECR_REGISTRY}/${ECR_REPO_NAME}:${VERSION}'
    # - 'docker push ${ECR_REGISTRY}/${ECR_REPO_NAME}:${VERSION}'
    
  # artifacts:
  #   paths:
  #     - variables.env  
  #   reports:
  #     dotenv: variables.env 
  cache:
    key: "docker-aws-cli-cache"
    paths:
      - ${BIN_DIR}/  
    policy: pull-push  

