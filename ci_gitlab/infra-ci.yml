stages:
  - validate_version
  - load_env_variables
  - validate_existing_infra_tags
  - validate_terraform_config

variables:
  TF_VERSION: "1.9.5"
  AWS_CLI_PATH: "/usr/local/bin/aws"
  TERRAFORM_PATH: "/usr/local/bin/terraform"

# cache:
#   key: tools
#   paths:
#     - /usr/local/bin/aws
#     - /usr/local/aws-cli
#     - /usr/local/bin/terraform
#     - ~/.terraform.d

# before_script:
#   - apt-get update && apt-get install -y jq
#   - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
#   - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
#   - export TF_API_TOKEN=$TF_API_TOKEN
#   - > # Installing AWS CLI
#     curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip";
#     unzip awscliv2.zip;
#     sudo ./aws/install;
#     rm -rf awscliv2.zip aws;
#   - > # Installing Terraform
#     curl -fsSL "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip" -o terraform.zip;
#     unzip terraform.zip;
#     sudo mv terraform /usr/local/bin/;
#     rm terraform.zip;
  
#   - export PATH=$PATH:/usr/local/bin



validate_version:
  stage: validate_version
  script:
    - env
    - 'echo "Current branch: ${CI_COMMIT_REF_NAME}"'
    - echo "Available tags:" && git tag
    - 'export VERSION=$(cat app/infra_version.txt)'
    - 'echo "VERSION=${VERSION}"'
    - 'TAG="${CI_COMMIT_REF_NAME}-infra-v${VERSION}"'
    - 'echo ${TAG}'
    - 'git fetch --tags'
    - 'git tag'
    - > 
      if ! git fetch --tags || ! git tag | grep -q "^${TAG}$"; then 
        echo "Error: No matching tag ${TAG} found." && exit 1;  
      fi
    - 'echo "TAG=${TAG}" >> variables.env'
    - 'echo "VERSION=${VERSION}" >> variables.env'
    - 'echo "ENVIRONMENT=${CI_COMMIT_REF_NAME}" >> variables.env'
  artifacts:
    reports:
      dotenv: variables.env 

load_env_variables:
  stage: load_env_variables
  needs: [validate_version]
  script:
    - env
    - 'echo TAG on second stage: ${TAG}'
    - 'ENVIRONMENT_UPPERCASE=$(echo "${ENVIRONMENT}" | tr "[:lower:]" "[:upper:]")'
    - 'grep "^${ENVIRONMENT_UPPERCASE}_" app/.env | sed -E "s/^${ENVIRONMENT_UPPERCASE}_//" >> variables.env'
    - 'echo "ENVIRONMENT_UPPERCASE: ${ENVIRONMENT_UPPERCASE}"'
    - 'echo "ENVIRONMENT: ${ENVIRONMENT}"'
    - 'echo "TAG: ${TAG}"'
    - env
    - 'echo "aws_region: ${aws_region}"'
    - 'echo "TAG=${TAG}" >> variables.env'
    - 'echo "VERSION=${VERSION}" >> variables.env'
    - 'echo "ENVIRONMENT=${CI_COMMIT_REF_NAME}" >> variables.env'
  artifacts:
    reports:
      dotenv: variables.env 


validate_existing_infra_tags:
  stage: validate_existing_infra_tags
  needs: [load_env_variables]
  script:
    - env
    - 'echo TAG on second stage: ${TAG}'
    - 'aws ssm get-parameter --region ${aws_region} --name "/app/${ENVIRONMENT}/infrastructure_version" --query "Parameter.Value" --output text 2>&1'
    # - 'infra_version=$(aws ssm get-parameter --region ${aws_region} --name "/app/${ENVIRONMENT}/infrastructure_version" --query "Parameter.Value" --output text 2>&1)'
    # - 
    # $(aws ssm get-parameter --name "/app/${ENVIRONMENT}/infrastructure_version" --query "Parameter.Value" --output text || echo "")'
    # - 'echo aws_region: ${aws_region}'
    # - 'echo CURRENT_INFRA_VERSION: ${CURRENT_INFRA_VERSION}'
    # - 'echo VERSION: ${VERSION}'
    # - > 
    #   if [ "${VERSION}" = "${current_infra_version}" ]; then
    #     echo "The version ${ENVIRONMENT}-infra-${VERSION} is already deployed on AWS"
    #     version_exists=true
    #   else
    #     echo "The version ${ENVIRONMENT}-infra-${VERSION} will be deployed on AWS"
    #     version_exists=false
    #   fi
    # - 'echo "CURRENT_INFRA_VERSION=${CURRENT_INFRA_VERSION}" >> variables.env'
    # - 'echo "version_exists=${version_exists}" >> variables.env'

validate_terraform_config:
  stage: validate_terraform_config
  needs: [validate_existing_infra_tags]
  script:

    - 'git checkout "${TAG}"'
    - terraform init
    - terraform fmt -check
    - terraform validate
  rules:
    - if: $version_exists == "false"  