stages:
  - setup
  - validate_version
  - load_env_variables
  - validate_existing_infra_tags
  - load_terraform_variables
  - validate_terraform_config

variables:
  TF_VERSION: "1.9.5"
  BIN_DIR: "${CI_PROJECT_DIR}/bin"  # Store binaries in project directory



#image: amazon/aws-cli:latest #amazon/aws-cli # I'm not using an image just yet
cache:
  key: "terraform-aws-cli-cache"
  paths:
    - .terraform/  # Cache Terraform modules
    - ${BIN_DIR}/  # Cache AWS CLI & Terraform binaries
  policy: pull-push

  # - > # Installing AWS CLI
  #   - apt-get update && apt-get install -y jq
  #   curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip";
  #   unzip awscliv2.zip;
  #   ./aws/install;
  #   rm -rf awscliv2.zip aws;
  # - > # Installing Terraform
  #   curl -fsSL "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip" -o terraform.zip;
  #   unzip terraform.zip;
  #   mv terraform /usr/local/bin/;
  #   rm terraform.zip;
  # - apt-get update && apt-get install -y jq


setup:
  stage: setup
  before_script:
    - apt-get update && apt-get install -y unzip curl jq
    - mkdir -p ${BIN_DIR} && export PATH="${BIN_DIR}:$PATH"
    - if [ ! -f "${BIN_DIR}/aws" ]; then curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip awscliv2.zip && ./aws/install --bin-dir ${BIN_DIR} --install-dir ${BIN_DIR}; fi
    - if [ ! -f "${BIN_DIR}/terraform" ]; then curl -O https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip && unzip terraform_${TF_VERSION}_linux_amd64.zip && mv terraform ${BIN_DIR}/; fi

    # # Install AWS CLI if not cached
    # - |
    #   if [ ! -f "${CACHE_DIR}/aws-cli/bin/aws" ]; then
    #     echo "Installing AWS CLI..."
    #     curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    #     unzip awscliv2.zip
    #     ./aws/install --install-dir ${CACHE_DIR}/aws-cli --bin-dir ${CACHE_DIR}/aws-cli/bin
    #     rm -rf awscliv2.zip aws
    #   fi

    # # Install Terraform if not cached
    # - |
    #   if [ ! -f "${CACHE_DIR}/terraform" ]; then
    #     echo "Installing Terraform..."
    #     curl -fsSL "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip" -o terraform.zip
    #     unzip terraform.zip
    #     mv terraform $CACHE_DIR/terraform
    #     rm terraform.zip
    #   fi

  #image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest

  script:
    #- aws --version
    # - aws s3api list-buckets --region us-east-1 --query "Buckets[].Name"
    # - terraform -version
    - ls /usr/local/bin/
  cache:
    key: "terraform-aws-cli-cache"
    paths:
      - .terraform/  # Cache Terraform modules
      - ${BIN_DIR}/  # Cache AWS CLI & Terraform binaries
    policy: pull-push  # Save & restore cache across jobs


validate_version:
  stage: validate_version
  needs: [setup]
  before_script:
  - export PATH="${BIN_DIR}:$PATH"
  script:
    - ls /usr/local/bin/
    - aws --version
    - aws s3api list-buckets --region us-east-1 --query "Buckets[].Name"
    - env
    - 'echo "Current branch: ${CI_COMMIT_REF_NAME}"'
    - echo "Available tags:" && git tag
    - 'export VERSION=$(cat app/infra_version.txt)'
    - 'echo "VERSION=${VERSION}"'
    - 'TAG="${CI_COMMIT_REF_NAME}-infra-v${VERSION}"'
    - 'echo ${TAG}'
    - 'git fetch --tags'
    - 'git tag'
    - > 
      if ! git fetch --tags || ! git tag | grep -q "^${TAG}$"; then 
        echo "Error: No matching tag ${TAG} found." && exit 1;  
      fi
    - 'echo "TAG=${TAG}" >> variables.env'
    - 'echo "VERSION=${VERSION}" >> variables.env'
    - 'echo "ENVIRONMENT=${CI_COMMIT_REF_NAME}" >> variables.env'
  artifacts:
    paths:
    - variables.env  # Ensure `variables.env` persis
    reports:
      dotenv: variables.env 
  cache:
    key: "terraform-aws-cli-cache"
    paths:
      - .terraform/  
      - ${BIN_DIR}/  
    policy: pull-push  

load_env_variables:
  stage: load_env_variables
  needs: [validate_version]
  before_script:
  - export PATH="${BIN_DIR}:$PATH"
  - source variables.env  # Load persisted variable
  script:
    - env
    - 'echo TAG on second stage: ${TAG}'
    - 'ENVIRONMENT_UPPERCASE=$(echo "${ENVIRONMENT}" | tr "[:lower:]" "[:upper:]")'
    - 'grep "^${ENVIRONMENT_UPPERCASE}_" app/.env | sed -E "s/^${ENVIRONMENT_UPPERCASE}_//" >> variables.env'
    - 'echo "ENVIRONMENT_UPPERCASE: ${ENVIRONMENT_UPPERCASE}"'
    - 'echo "ENVIRONMENT: ${ENVIRONMENT}"'
    - 'echo "TAG: ${TAG}"'
    - env
    - 'echo "aws_region: ${aws_region}"' # it will be shown in the next stage
    # - 'echo "TAG=${TAG}" >> variables.env'
    # - 'echo "VERSION=${VERSION}" >> variables.env'
    # - 'echo "ENVIRONMENT=${CI_COMMIT_REF_NAME}" >> variables.env'
    - aws s3api list-buckets --region us-east-1 --query "Buckets[].Name"
  artifacts:
    paths:
      - variables.env  
    reports:
      dotenv: variables.env 
  cache:
    key: "terraform-aws-cli-cache"
    paths:
      - .terraform/  
      - ${BIN_DIR}/  
    policy: pull-push  

validate_existing_infra_tags:
  stage: validate_existing_infra_tags
  needs: [load_env_variables]
  before_script:
  - export PATH="${BIN_DIR}:$PATH"
  - source variables.env
  script:
    - env
    - 'echo TAG on second stage: ${TAG}'
    - ls -lah
    - 'echo "AWS Region: ${aws_region}"'
    - |
      infra_version=$(aws ssm get-parameter --region "${aws_region}" \
        --name "/app/${ENVIRONMENT}/infrastructure_version" \
        --query "Parameter.Value" --output text 2>&1 || echo "ParameterNotFound")
      
      if [[ "${infra_version}" == "ParameterNotFound" ]]; then
        echo "No Infrastructure version found. Deploying tag: ${TAG}"
        echo "version_exists=false" >> variables.env
      elif [[ "${infra_version}" == "${TAG}" ]]; then
        echo "Infrastructure already at version ${TAG}. Skipping deployment."
        echo "version_exists=true" >> variables.env
      else
        echo "Different version detected (${infra_version}). Deploying new tag: ${TAG}"
        echo "version_exists=false" >> variables.env
      fi
  artifacts:
    paths:
      - variables.env  
    reports:
      dotenv: variables.env 
  cache:
    key: "terraform-aws-cli-cache"
    paths:
      - .terraform/  
      - ${BIN_DIR}/  
    policy: pull-push  

load_terraform_variables:
  stage: load_terraform_variables
  needs: [validate_existing_infra_tags]
  before_script:
  - export PATH="${BIN_DIR}:$PATH"
  - source variables.env
  script:
    - 'echo "TF_VAR_env=${ENVIRONMENT}" >> variables.env' 
    - 'echo "TF_VAR_path_user_data=app/terraform/modules/asg/user_data.sh" >> variables.env' 
    - 'echo "TF_VAR_infrastructure_version=${ENVIRONMENT}-infra-v${VERSION}" >> variables.env' 
    - 'echo "TF_WORKSPACE=${ENVIRONMENT}" >> variables.env' 
    - 'echo "TF_VAR_aws_region=${aws_region}" >> variables.env' 
    - 'echo "TF_cidr_block=${cidr_block}" >> variables.env' 
    - 'echo "TF_public_subnet_a_cidr=${public_subnet_a_cidr}" >> variables.env' 
    - 'echo "TF_public_subnet_b_cidr=${public_subnet_b_cidr}" >> variables.env' 
    - 'echo "TF_private_subnet_a_cidr=${private_subnet_a_cidr}" >> variables.env' 
    - 'echo "TF_private_subnet_b_cidr=${private_subnet_b_cidr}" >> variables.env' 


  artifacts:
    paths:
      - variables.env  
    reports:
      dotenv: variables.env  
  cache:
    key: "terraform-aws-cli-cache"
    paths:
      - .terraform/  
      - ${BIN_DIR}/  
    policy: pull-push  

validate_terraform_config:
  stage: validate_terraform_config
  needs: [load_terraform_variables]
  before_script:
  - export PATH="${BIN_DIR}:$PATH"
  - source variables.env
  script:
    - 'echo "version_exists: ${version_exists}"'
    - 'echo "TAG: ${TAG}"'
    - 'git --version'
    - 'git tag'
    - 'git branch'
    - 'git tag'
    - 'git fetch --tags'
    - ls
    - pwd
    - env
    - 'git checkout ${TAG}'
    - 'mkdir -p ~/.terraform.d'
    - 'echo "{ "credentials": { "app.terraform.io": { "token": \""${TF_API_TOKEN}"\" } } }" > ~/.terraform.d/credentials.tfrc.json'
    - 'chmod 600 ~/.terraform.d/credentials.tfrc.json'
    - cd app/terraform/
    - terraform init
    - terraform fmt -check
    - terraform validate
  # rules:
  #   - if: $version_exists == "false" 
  artifacts:
    paths:
      - variables.env  
    reports:
      dotenv: variables.env  
  cache:
    key: "terraform-aws-cli-cache"
    paths:
      - .terraform/  
      - ${BIN_DIR}/  
    policy: pull-push  